name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'runpod-service/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger
    inputs:
      build_type:
        description: 'Build type (all, test, production)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - test
          - production

env:
  REGISTRY: docker.io
  IMAGE_NAME: censorship-service  # Change to YOUR_USERNAME/censorship-service

jobs:
  build-test-image:
    name: Build Test Image (CPU/2GB GPU)
    runs-on: ubuntu-latest
    if: github.event.inputs.build_type == 'all' || github.event.inputs.build_type == 'test' || github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "Disk space before cleanup:"
          df -h
          # Remove unnecessary software (frees ~10GB)
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker system prune -af
          sudo apt-get clean
          echo "Disk space after cleanup:"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Test image
        uses: docker/build-push-action@v5
        with:
          context: ./runpod-service
          file: ./runpod-service/Dockerfile.cpu-test
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:test
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:test-${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-production-image:
    name: Build Production Image (Optimized)
    runs-on: ubuntu-latest
    if: github.event.inputs.build_type == 'all' || github.event.inputs.build_type == 'production' || github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo docker system prune -af
          sudo apt-get clean

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Production image
        uses: docker/build-push-action@v5
        with:
          context: ./runpod-service
          file: ./runpod-service/Dockerfile.optimized
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:production
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-test-image, build-production-image]
    if: always()

    steps:
      - name: Build summary
        run: |
          echo "### 🚀 Docker Images Built Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Available Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Test Image (Local Testing - 2GB GPU)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:test" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Use for:**" >> $GITHUB_STEP_SUMMARY
          echo "- Local testing on 2GB GPU" >> $GITHUB_STEP_SUMMARY
          echo "- Feature toggling (Text+NSFW, CPU mode, etc.)" >> $GITHUB_STEP_SUMMARY
          echo "- Quick testing without building" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏭 Production Image (RunPod - 24GB GPU)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:production" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Use for:**" >> $GITHUB_STEP_SUMMARY
          echo "- RunPod deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Production workloads" >> $GITHUB_STEP_SUMMARY
          echo "- All features enabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Quick Start" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull test image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run with Text + NSFW (2GB GPU)" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm --gpus all -p 8000:8000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e LOAD_TEXT_DETECTOR=true \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e LOAD_NSFW_DETECTOR=true \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e LOAD_AUDIO_DETECTOR=false \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:test" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
