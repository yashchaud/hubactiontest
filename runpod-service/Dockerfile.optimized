# ==============================================================================
# OPTIMIZED DOCKERFILE - RunPod GPU Service
# Build time: ~10-15 minutes (vs 2+ hours)
# Image size: ~8GB (vs 15GB+)
# ==============================================================================
#
# OPTIMIZATION STRATEGIES:
# 1. Multi-stage build to reduce final image size
# 2. Aggressive layer caching (pip dependencies split into groups)
# 3. Remove build dependencies from runtime image
# 4. Pre-download ML models during build (not at runtime)
# 5. Use tensorflow-gpu instead of full tensorflow (saves 1.5GB)
# 6. Remove unnecessary system packages
# 7. Proper .dockerignore to avoid copying junk
#
# BUILD COMMAND:
# docker build -f Dockerfile.optimized -t censorship-service:optimized .
#
# BUILD WITH CACHE:
# docker build -f Dockerfile.optimized -t censorship-service:optimized \
#   --build-arg BUILDKIT_INLINE_CACHE=1 .
#
# ==============================================================================

# ==============================================================================
# STAGE 1: Builder - Install dependencies and download models
# ==============================================================================

FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 AS builder

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Fix NVIDIA repo hash mismatch by disabling it temporarily
# Install Python and build dependencies
RUN rm -f /etc/apt/sources.list.d/cuda*.list && \
    apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3-pip \
    python3-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip
RUN pip3 install --upgrade pip setuptools wheel

WORKDIR /build

# ==============================================================================
# Layer 1: Install CORE dependencies (FastAPI, uvicorn - rarely changes)
# ==============================================================================
RUN pip3 install --no-cache-dir \
    fastapi==0.109.0 \
    uvicorn[standard]==0.27.0 \
    python-multipart==0.0.6 \
    websockets==12.0 \
    pydantic==2.5.3 \
    aiofiles==23.2.1

# ==============================================================================
# Layer 2: Install ML FRAMEWORKS (TensorFlow - large, rarely changes)
# ==============================================================================
# Note: tensorflow-gpu was discontinued after 2.12, use tensorflow instead (has GPU support)
RUN pip3 install --no-cache-dir \
    tensorflow==2.15.0 \
    onnxruntime-gpu==1.17.0

# ==============================================================================
# Layer 3: Install COMPUTER VISION (OpenCV, numpy - medium size)
# ==============================================================================
RUN pip3 install --no-cache-dir \
    opencv-python-headless==4.9.0.80 \
    "numpy>=1.26.0,<2.0.0" \
    pillow==10.2.0

# ==============================================================================
# Layer 4: Install ML MODELS (Downloads models - slow layer)
# ==============================================================================
# This layer takes longest but is cached once models are downloaded
RUN pip3 install --no-cache-dir \
    keras-ocr==0.9.3 \
    nudenet==3.4.2 \
    openai-whisper==20231117

# ==============================================================================
# Layer 5: Install AUDIO/VIDEO processing
# ==============================================================================
RUN pip3 install --no-cache-dir \
    soundfile==0.12.1 \
    librosa==0.10.1 \
    pydub==0.25.1 \
    ffmpeg-python==0.2.0 \
    av==11.0.0

# ==============================================================================
# Layer 6: Install UTILITIES (small, fast)
# ==============================================================================
RUN pip3 install --no-cache-dir \
    python-dotenv==1.0.0 \
    requests==2.31.0 \
    redis==5.0.1 \
    better-profanity==0.7.0 \
    psutil==5.9.8

# ==============================================================================
# CRITICAL FIX: Force downgrade NumPy to 1.x (TensorFlow incompatible with 2.x)
# ==============================================================================
# Some packages above may have upgraded numpy to 2.x, force it back down
RUN pip3 install --force-reinstall --no-cache-dir "numpy<2"

# ==============================================================================
# Pre-download ML models (DISABLED - downloads at runtime instead)
# ==============================================================================
# Note: Model downloads during Docker build are unreliable (network issues, timeouts)
# Models will auto-download on first API request (~2-3 minutes first time)
# They are cached in the container after first download
# RUN python3 -c "import keras_ocr; keras_ocr.pipeline.Pipeline()" && \
#     python3 -c "from nudenet import NudeDetector; NudeDetector()" && \
#     echo "Models pre-downloaded successfully!"

# ==============================================================================
# STAGE 2: Runtime - Slim final image
# ==============================================================================

FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 AS runtime

# Metadata
LABEL maintainer="your-email@example.com"
LABEL description="RunPod GPU Service for Real-Time Content Censorship (Optimized)"
LABEL version="2.0-optimized"

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PATH="/usr/local/bin:$PATH"
# Set HOME to writable directory (fixes Keras/Matplotlib cache permission errors)
ENV HOME=/app
ENV MPLCONFIGDIR=/app/.config/matplotlib
ENV KERAS_HOME=/app/.keras

# Fix NVIDIA repo hash mismatch for runtime stage too
# Install ONLY runtime dependencies (no build tools!)
RUN rm -f /etc/apt/sources.list.d/cuda*.list && \
    apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3-pip \
    ffmpeg \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    libglib2.0-0 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy pre-downloaded models from builder (DISABLED - models download at runtime)
# COPY --from=builder /root/.keras-ocr /root/.keras-ocr
# COPY --from=builder /root/.NudeNet /root/.NudeNet

# Set working directory
WORKDIR /app

# Copy application code (this layer invalidates on code changes)
COPY --chown=nobody:nogroup . .

# Create directories (including cache dirs for Keras and Matplotlib)
RUN mkdir -p /app/models /app/temp /app/logs /app/.config/matplotlib /app/.keras && \
    chmod -R 777 /app

# Run as non-root user for security
USER nobody

# Expose port
EXPOSE 8000

# Health check (extended start-period for model downloads on first boot)
HEALTHCHECK --interval=30s --timeout=10s --start-period=300s --retries=3 \
    CMD python3 -c "import requests; requests.get('http://localhost:8000/health', timeout=5)" || exit 1

# Run application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1", "--log-level", "info"]
